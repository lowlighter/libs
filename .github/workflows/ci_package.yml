name: Package
on:
  workflow_dispatch:
    inputs:
      package:
        description: Package
        required: true
        type: string
      publish:
        description: Publish
        default: false
        type: boolean
  workflow_call:
    inputs:
      package:
        description: Package
        required: true
        type: string
      publish:
        description: Publish
        default: false
        type: boolean
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      edited: ${{ steps.files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
      - id: files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            ${{ github.event.inputs.package }}/**

  lint:
    name: Lint
    if: ${{ needs.setup.outputs.edited }}
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v1
      - run: deno lint
        working-directory: ${{ inputs.package }}
      - run: deno fmt --check
        working-directory: ${{ inputs.package }}

  codeql:
    name: Code quality
    if: ${{ needs.setup.outputs.edited }}
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: typescript
          config: |
            paths:
              - ${{ inputs.package }}
      - uses: github/codeql-action/analyze@v3

  test:
    name: Build, test and bench
    if: ${{ needs.setup.outputs.edited }}
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      has_build: ${{ steps.package.outputs.has_build }}
      has_bench: ${{ steps.package.outputs.has_bench }}
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      # Setup
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: denoland/setup-deno@v1
      - name: Check package requirements
        id: package
        run: |
          echo "has_build=$(deno eval 'console.log(!!JSON.parse(Deno.readTextFileSync(`deno.jsonc`))?.tasks?.build || ``)')" >> "$GITHUB_OUTPUT"
          echo "has_bench=$(deno eval 'console.log(!!JSON.parse(Deno.readTextFileSync(`deno.jsonc`))?.tasks?.bench || ``)')" >> "$GITHUB_OUTPUT"
        working-directory: ${{ inputs.package }}
      # Build
      - run: deno task build
        if: ${{ steps.package.outputs.has_build }}
        working-directory: ${{ inputs.package }}
      # Tests
      - run: deno task dev
        working-directory: ${{ inputs.package }}
      - uses: actions/setup-node@v4
      - uses: oven-sh/setup-bun@v1
      - run: deno task ci
        working-directory: ${{ inputs.package }}
      # Bench
      - run: deno task bench
        if: ${{ steps.package.outputs.has_bench }}
        working-directory: ${{ inputs.package }}
      # Tag
      - id: tag
        uses: ldelarue/git-next-tag@v0.4
        with:
          tag-prefix: ${{ inputs.package }}-
          scope: ${{ inputs.package }}

  publish:
    name: Publish
    if: github.ref == 'refs/heads/main' && ${{ inputs.publish }}
    runs-on: ubuntu-latest
    needs:
      - lint
      - codeql
      - test
    permissions:
      id-token: write
      contents: write
      packages: write
    steps:
      # Setup
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: denoland/setup-deno@v1
      - name: Configure git
        run: git config user.name 'github-actions[bot]' && git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
      # Build
      - name: Run deno task build
        if: ${{ needs.test.outputs.has_build }}
        run: |
          deno task build
          git add .
          git commit -m 'chore(${{ inputs.package }}): rebuild package'
          git pull --ff-only
          git push
        working-directory: ${{ inputs.package }}
      # Tag
      - name: Run deno task tag
        if: ${{ needs.test.outputs.tag }}
        run: |
          deno task tag --version '${{ needs.test.outputs.tag }}' ${{ inputs.package }}
          cd ${{ inputs.package }}
          deno fmt deno.jsonc
          git add deno.jsonc
          git commit -m "chore(${{ inputs.package }}): bump version ${{ needs.test.outputs.tag }}"
          git pull --ff-only
          git push
      - name: Run git tag
        if: ${{ needs.test.outputs.tag }}
        run: |
          git tag '${{ needs.test.outputs.tag }}'
          git show-ref --tags '${{ needs.test.outputs.tag }}'
          git pull --ff-only
          git push origin '${{ needs.test.outputs.tag }}'
        working-directory: ${{ inputs.package }}
      # Publish
      - run: deno publish
        working-directory: ${{ inputs.package }}
